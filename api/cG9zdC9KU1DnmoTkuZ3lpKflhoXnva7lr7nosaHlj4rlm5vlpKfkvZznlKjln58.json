{"title":"JSP的九大内置对象及四大作用域","date":"2018-08-24T12:27:49.000Z","excerpt":"","slug":"JSP的九大内置对象及四大作用域","tags":["JavaServer Pages(jsp)"],"categories":["WebServer"],"updated":"2018-08-24T13:13:54.689Z","content":"<h2 id=\"一、JSP有九个内置对象（又叫隐含对象），不需要预先声明就可以在脚本代码和表达式中随意使用\"><a href=\"#一、JSP有九个内置对象（又叫隐含对象），不需要预先声明就可以在脚本代码和表达式中随意使用\" class=\"headerlink\" title=\"一、JSP有九个内置对象（又叫隐含对象），不需要预先声明就可以在脚本代码和表达式中随意使用.\"></a>一、JSP有九个内置对象（又叫隐含对象），不需要预先声明就可以在脚本代码和表达式中随意使用.</h2><p>JSP中一共预先定义了9个这样的对象，分别为：request、response、session、application、out、pagecontext、config、page、exception:</p>\n<h3 id=\"1、request对象\"><a href=\"#1、request对象\" class=\"headerlink\" title=\"1、request对象\"></a>1、request对象</h3><p>request 对象是 javax.servlet.httpServletRequest类型的对象。 该对象代表了客户端的请求信息，主要用于接受通过HTTP协议传送到服务器的数据。（包括头信息、系统信息、请求方式以及请求参数等）。request对象的作用域为一次请求。</p>\n<h3 id=\"2、response对象\"><a href=\"#2、response对象\" class=\"headerlink\" title=\"2、response对象\"></a>2、response对象</h3><p>response 代表的是对客户端的响应，主要是将JSP容器处理过的对象传回到客户端。response对象也具有作用域，它只在JSP页面内有效。</p>\n<h3 id=\"3、session对象\"><a href=\"#3、session对象\" class=\"headerlink\" title=\"3、session对象\"></a>3、session对象</h3><p>session 对象是由服务器自动创建的与用户请求相关的对象。服务器为每个用户都生成一个session对象，用于保存该用户的信息，跟踪用户的操作状态。session对象内部使用Map类来保存数据，因此保存数据的格式为 “Key/value”。 session对象的value可以使复杂的对象类型，而不仅仅局限于字符串类型。</p>\n<h3 id=\"4、application对象\"><a href=\"#4、application对象\" class=\"headerlink\" title=\"4、application对象\"></a>4、application对象</h3><p> application 对象可将信息保存在服务器中，直到服务器关闭，否则application对象中保存的信息会在整个应用中都有效。与session对象相比，application对象生命周期更长，类似于系统的“全局变量”。</p>\n<h3 id=\"5、out-对象\"><a href=\"#5、out-对象\" class=\"headerlink\" title=\"5、out 对象\"></a>5、out 对象</h3><p>out 对象用于在Web浏览器内输出信息，并且管理应用服务器上的输出缓冲区。在使用 out 对象输出数据时，可以对数据缓冲区进行操作，及时清除缓冲区中的残余数据，为其他的输出让出缓冲空间。待数据输出完毕后，要及时关闭输出流。</p>\n<h3 id=\"6、pageContext-对象\"><a href=\"#6、pageContext-对象\" class=\"headerlink\" title=\"6、pageContext 对象\"></a>6、pageContext 对象</h3><p>pageContext 对象的作用是取得任何范围的参数，通过它可以获取 JSP页面的out、request、reponse、session、application 等对象。pageContext对象的创建和初始化都是由容器来完成的，在JSP页面中可以直接使用 pageContext对象。</p>\n<h3 id=\"7、config-对象\"><a href=\"#7、config-对象\" class=\"headerlink\" title=\"7、config 对象\"></a>7、config 对象</h3><p>config 对象的主要作用是取得服务器的配置信息。通过 pageConext对象的 getServletConfig() 方法可以获取一个config对象。当一个Servlet 初始化时，容器把某些信息通过 config对象传递给这个 Servlet。 开发者可以在web.xml 文件中为应用程序环境中的Servlet程序和JSP页面提供初始化参数。</p>\n<h3 id=\"8、page-对象\"><a href=\"#8、page-对象\" class=\"headerlink\" title=\"8、page 对象\"></a>8、page 对象</h3><p>page 对象代表JSP本身，只有在JSP页面内才是合法的。 page隐含对象本质上包含当前 Servlet接口引用的变量，类似于Java编程中的 this 指针。</p>\n<h3 id=\"9、exception-对象\"><a href=\"#9、exception-对象\" class=\"headerlink\" title=\"9、exception 对象\"></a>9、exception 对象</h3><p>exception 对象的作用是显示异常信息，只有在包含 isErrorPage=”true” 的页面中才可以被使用，在一般的JSP页面中使用该对象将无法编译JSP文件。excepation对象和Java的所有对象一样，都具有系统提供的继承结构。exception 对象几乎定义了所有异常情况。在Java程序中，可以使用try/catch关键字来处理异常情况； 如果在JSP页面中出现没有捕获到的异常，就会生成 exception 对象，并把 exception 对象传送到在page指令中设定的错误页面中，然后在错误页面中处理相应的 exception 对象。</p>\n<h2 id=\"二、所谓“作用域”就是“信息共享的范围”，也就是说一个信息能够在多大的范围内有效。JSP中九个内置对象及其相应所属作用域如下表\"><a href=\"#二、所谓“作用域”就是“信息共享的范围”，也就是说一个信息能够在多大的范围内有效。JSP中九个内置对象及其相应所属作用域如下表\" class=\"headerlink\" title=\"二、所谓“作用域”就是“信息共享的范围”，也就是说一个信息能够在多大的范围内有效。JSP中九个内置对象及其相应所属作用域如下表\"></a>二、所谓“作用域”就是“信息共享的范围”，也就是说一个信息能够在多大的范围内有效。JSP中九个内置对象及其相应所属作用域如下表</h2><p>JSP九大内置对象分为四类：</p>\n<h3 id=\"1-application\"><a href=\"#1-application\" class=\"headerlink\" title=\"1.application\"></a>1.application</h3><p>application作用域就是服务器启动到关闭的整段时间，在这个作用域内设置的信息可以被所有应用程序使用。application作用域上的信息传递是通过ServletContext实现的. application = 应用级别，当重启服务器时才会消失</p>\n<h3 id=\"2-session\"><a href=\"#2-session\" class=\"headerlink\" title=\"2.session\"></a>2.session</h3><p>session作用域比较容易理解，同一浏览器对服务器进行多次访问，在这多次访问之间传递信息，就是session作用域的体现,<br> 一个HTTP请求的处理可能需要多个Servlet合作，而这几个Servlet之间可以通过某种方式传递信息，但这个信息在请求结束后就无效了。Servlet之间的信息共享是通过HttpServletRequest接口的两个方法来实现的。 </p>\n<h3 id=\"3-request\"><a href=\"#3-request\" class=\"headerlink\" title=\"3.request\"></a>3.request</h3><p>request -&gt; 请求级别 服务器跳转，一次请求之后消失。</p>\n<h3 id=\"4-page\"><a href=\"#4-page\" class=\"headerlink\" title=\"4.page\"></a>4.page</h3><p>page对象的作用范围仅限于用户请求的当前页面，对于page对象的引用将在响应返回给客户端之后被释放，或者在请求被转发到其他地方后被释放。对page对象的引用通常存储在pageContext对象中。page -&gt; 页面级别，显然只有在一个页面内可用。</p>\n<h3 id=\"5-作用域表\"><a href=\"#5-作用域表\" class=\"headerlink\" title=\"5.作用域表\"></a>5.作用域表</h3><p>编号    对象    所属作用域    作用域描述<br>1    request    request    在当前请求中有效<br>2    response    page    在当前页面有效<br>3    out    page    在当前页面有效<br>4    session    session    在当前会话中有效<br>5    application    application    在所有应用程序中有效<br>6    config    page    在当前页面有效<br>7    pageContext    page    在当前页面有效<br>8    page    page    在当前页面有效<br>9    Exception    page    在当前页面有效</p>\n<h2 id=\"三、九大内置对象的常用方法\"><a href=\"#三、九大内置对象的常用方法\" class=\"headerlink\" title=\"三、九大内置对象的常用方法\"></a>三、九大内置对象的常用方法</h2><h3 id=\"1-request内置对象是最常用的对象之一，它代表的是java-servlet-HttpServletRequest类的对象。request内置对象中包含了有关浏览器请求的信息，并提供了多个用于获取cookie、header以及session内数据的方法。\"><a href=\"#1-request内置对象是最常用的对象之一，它代表的是java-servlet-HttpServletRequest类的对象。request内置对象中包含了有关浏览器请求的信息，并提供了多个用于获取cookie、header以及session内数据的方法。\" class=\"headerlink\" title=\"1.request内置对象是最常用的对象之一，它代表的是java.servlet.HttpServletRequest类的对象。request内置对象中包含了有关浏览器请求的信息，并提供了多个用于获取cookie、header以及session内数据的方法。\"></a>1.request内置对象是最常用的对象之一，它代表的是java.servlet.HttpServletRequest类的对象。request内置对象中包含了有关浏览器请求的信息，并提供了多个用于获取cookie、header以及session内数据的方法。</h3><p>request对象常用方法<br>request对象主要用于客户端请求处理，其中，该对象中所包含的方法有：<br>request对象主要用于客户端请求处理，其中，该对象中所包含的方法有：<br>getMethod()：返回HTTP请求信息中所使用到的方法名称；<br>getServletPath()：返回请求信息中调用Servlet的URL部分；<br>getProtocol()：返回请求信息中的协议名名字与版本号；<br>getServletName()：返回接受请求的服务器主机；<br>getServletPort()：返回服务器的端口号；<br>getRemoteHost()：返回提交请求的客户机的规范名字；<br>getRemoteAddr()：返回提交请求的客户机的IP地址；<br>getParameter()：返回客户端通过表单提交过来的参数值。例如request.getParameter(“myname”)，通过该语句来获取客户端传递过来的myname 参数。<br>getContextPath()：返回HTTP 请求中指示请求上下文的部分。<br>gtRequestURL()：返回HTTP 请求信息中的第一行从协议名开始直至查询字符串之间的URL 部分。例如，对HTTP GET 请求<a href=\"http://www.zzbsite.com/helloworld?name=johnson&amp;age=20，这个方法将返回http://www.zzbsite.com/helloworld\" target=\"_blank\" rel=\"noopener\">http://www.zzbsite.com/helloworld?name=johnson&amp;age=20，这个方法将返回http://www.zzbsite.com/helloworld</a> 字符串。<br>gtCountLength()：返回整数，表示请求实体的长度（以字节为单位）。</p>\n<h3 id=\"2-response对象与request对象相对应，它是用于响应客户请求，向客户端输出信息。response是javax-servlet-HttpServletResponse类的对象。\"><a href=\"#2-response对象与request对象相对应，它是用于响应客户请求，向客户端输出信息。response是javax-servlet-HttpServletResponse类的对象。\" class=\"headerlink\" title=\"2.response对象与request对象相对应，它是用于响应客户请求，向客户端输出信息。response是javax.servlet.HttpServletResponse类的对象。\"></a>2.response对象与request对象相对应，它是用于响应客户请求，向客户端输出信息。response是javax.servlet.HttpServletResponse类的对象。</h3><p>response对象的常用方法<br>setContentLength(int len)：此方法用于设置响应头的长度。 </p>\n<p>setContentType(String type)：用于设置HTTP响应的contentType中的MIME类型，其中可以包含字符编码的规则。例如可以把contentType设置为“text/html;charset=GBK”。在Servelet编写过程中，需要调用此方法进行设置，但是在JSP中一般都是使用page指令直接指定contentType的属性。</p>\n<p>getWriter()：此方法返回一个PrintWriter对象，在Servlet编写过程使用的比较频繁，而在JSP文件中，由于out是用getWriter()创建的PrintWriter对象的隐含对象，所以可以直接调用out对象作输出响应。 </p>\n<p>getCharacterEncoding()：该方法获得此时响应所采用的字符编码类型。 </p>\n<p>sendRedirect(String location)：将请求重新定位到一个不同的URL（页面）上。此方法在实际开发过程中会经常使用到。<br>在JSP页面中，response就是HttpServletResponse类的一个对象，可以直接使用response在JSP页面中调用HttpServletResponse类中所有方法。</p>\n<h3 id=\"3-page对象有点类似于Java编程中的this指针，就是指当前JSP页面本身。page是java-lang-Object类的对象。\"><a href=\"#3-page对象有点类似于Java编程中的this指针，就是指当前JSP页面本身。page是java-lang-Object类的对象。\" class=\"headerlink\" title=\"3.page对象有点类似于Java编程中的this指针，就是指当前JSP页面本身。page是java.lang.Object类的对象。\"></a>3.page对象有点类似于Java编程中的this指针，就是指当前JSP页面本身。page是java.lang.Object类的对象。</h3><p>page对象的常用方法<br>比较常用的page内置对象的方法有：<br>getClass()：返回当时Object的类。<br>hashCode()：返回此Object的哈希代码。<br>toString()：把此时的Object类转换成字符串。equals(Object o)：比较此对象是否和指定的对象是否相等。</p>\n<h3 id=\"4-session是与请求有关的会话期，它是java-servlet-http-HttpSession类的对象，用来表示和存储当前页面的请求信息。\"><a href=\"#4-session是与请求有关的会话期，它是java-servlet-http-HttpSession类的对象，用来表示和存储当前页面的请求信息。\" class=\"headerlink\" title=\"4.session是与请求有关的会话期，它是java.servlet.http.HttpSession类的对象，用来表示和存储当前页面的请求信息。\"></a>4.session是与请求有关的会话期，它是java.servlet.http.HttpSession类的对象，用来表示和存储当前页面的请求信息。</h3><p>getId()：此方法返回唯一的标识，这些标识为每个session而产生。当只有一个单一的值与一个session联合时，或当日志信息与先前的sessions有关时，它被当作键名用。 </p>\n<p> getAttribute(String key)：通过给定的关键字获取一个存储在session中相对应的信息。例如，Integer item = (Integer) session.getAttrobute(“item”)。 </p>\n<p>setAttribute(String key, Object obj)：提供一个关键词和一个对象值，然后存在session当中。例如，session.setAttribute(“ItemValue”, itemName)。</p>\n<p>session一般在服务器上设置了一个30分钟的过期时间，当客户端停止操作后30分钟，session中存储的信息会自动失效。<br>另外要非常注意的，session中保存和查找的信息不能是基本的类型，如int、double等，而必须是Java相对应的对象，例如Integer、Double等。</p>\n<h3 id=\"5-application是javax-servlet-ServletContext类对象的一个实例，用于实现用户之间的数据共享（多使用于网络聊天系统）。\"><a href=\"#5-application是javax-servlet-ServletContext类对象的一个实例，用于实现用户之间的数据共享（多使用于网络聊天系统）。\" class=\"headerlink\" title=\"5.application是javax.servlet.ServletContext类对象的一个实例，用于实现用户之间的数据共享（多使用于网络聊天系统）。\"></a>5.application是javax.servlet.ServletContext类对象的一个实例，用于实现用户之间的数据共享（多使用于网络聊天系统）。</h3><p>application对象与session对象的区别<br>它的作用有点类似于前一节介绍的session内置对象。但是它们之间还是有区别的，一般来说，一个用户对应着一个session，并且随着用户的离开session中的信息也会消失，所以不同客户之间的会话必须要确保某一时刻至少有一个客户没有终止会话；而application则不同，它会一直存在，类似于系统的“全局变量”，而且只有一个实例。<br>application对象的常用方法<br>application内置对象的常用方法如下：<br>getAttribute(String key)：通过一个关键字返回用户所需要的信息，返回类型为对象（Object），类似于session中的getAttribute(String key)方法。<br>setAttribute(String key, Object obj)：保存一个对象信息，并指定给一个关键字。<br>removeAttribute(String key)：通过关键字来删除一个对象信息。<br>getServletInfo()：返回JSP引擎的相关信息。<br>getRealPath(String path)：返回虚拟路径的真实路径。<br>getContext(String URLPath)：返回执行Web应用的application对象。<br>getMajorVersion()和getMinorVersion()：返回服务器所支持的Servlet API最大和最小版本号。<br>getResource(String path)：返回指定资源的URL路径。<br>getResourceAsStream(String path)：返回指定资源的输入流。<br>getRequestDispatcher(String URLPath)：返回指定资源的RequestDispatcher对象。</p>\n<h3 id=\"6-out对象是在JSP开发过程中使用得最为频繁的对象，但使用也是最为简单的。\"><a href=\"#6-out对象是在JSP开发过程中使用得最为频繁的对象，但使用也是最为简单的。\" class=\"headerlink\" title=\"6.out对象是在JSP开发过程中使用得最为频繁的对象，但使用也是最为简单的。\"></a>6.out对象是在JSP开发过程中使用得最为频繁的对象，但使用也是最为简单的。</h3><p>out对象的常用方法<br>print()：在页面中打印出字符串信息，不换行； </p>\n<p>println()：在页面中打印出字符串信息，并且换行； </p>\n<p>clear()：清除掉缓冲区中尚存在的内容。 </p>\n<p>clearBuffer()：此方法清除掉当前缓冲区中尚存在的内容。 </p>\n<p>flush()：清除掉数据流。 </p>\n<p>getBufferSize()：返回缓冲区的内存大小，单位为字节流。如果不进行缓冲区的设置，大小为0。 </p>\n<p>getRemaining()：此方法返回缓冲区还剩下多少字节数可以使用。 </p>\n<p>isAutoFlush()：检查当前缓冲区是设置为自动清空，还是满了就抛出异常。 close()：关闭输出流。</p>\n<p>其中print()与println()两个方法是使用最为频繁的。</p>\n<h3 id=\"7-exception内置对象是用来处理页面出现的异常错误，它是java-lang-Throwable类的一个对象。在实际JSP网站开发过程中，通常是在其页面中加入page指令的errorPage属性来将其指向一个专门处理异常错误的页面。如果这个错误处理页面已经封装了这个页面收到的错误信息，并且错误处理页面页面含有的isErrorpage属性设置为true，则这个错误处理页面可以使用以下方法来访问错误的信息：\"><a href=\"#7-exception内置对象是用来处理页面出现的异常错误，它是java-lang-Throwable类的一个对象。在实际JSP网站开发过程中，通常是在其页面中加入page指令的errorPage属性来将其指向一个专门处理异常错误的页面。如果这个错误处理页面已经封装了这个页面收到的错误信息，并且错误处理页面页面含有的isErrorpage属性设置为true，则这个错误处理页面可以使用以下方法来访问错误的信息：\" class=\"headerlink\" title=\"7.exception内置对象是用来处理页面出现的异常错误，它是java.lang.Throwable类的一个对象。在实际JSP网站开发过程中，通常是在其页面中加入page指令的errorPage属性来将其指向一个专门处理异常错误的页面。如果这个错误处理页面已经封装了这个页面收到的错误信息，并且错误处理页面页面含有的isErrorpage属性设置为true，则这个错误处理页面可以使用以下方法来访问错误的信息：\"></a>7.exception内置对象是用来处理页面出现的异常错误，它是java.lang.Throwable类的一个对象。在实际JSP网站开发过程中，通常是在其页面中加入page指令的errorPage属性来将其指向一个专门处理异常错误的页面。如果这个错误处理页面已经封装了这个页面收到的错误信息，并且错误处理页面页面含有的isErrorpage属性设置为true，则这个错误处理页面可以使用以下方法来访问错误的信息：</h3><p>getMessage()和getLocalizedMessage()：这两种方法分别返回exception对象的异常消息字符串和本地化语言的异常错误。<br>printStackTrace()：显示异常的栈跟踪轨迹。<br>toString()：返回关于异常错误的简单消息描述。<br>fillInStackTrace()：重写异常错误的栈执行轨迹。</p>\n<h3 id=\"8-config内置对象是ServletConfig类的一个实例。在Servlet初始化的时候，JSP引擎通过config向它传递信息。这种信息可以是属性名-值匹配的参数，也可以是通过ServletContext对象传递的服务器的有关信息。\"><a href=\"#8-config内置对象是ServletConfig类的一个实例。在Servlet初始化的时候，JSP引擎通过config向它传递信息。这种信息可以是属性名-值匹配的参数，也可以是通过ServletContext对象传递的服务器的有关信息。\" class=\"headerlink\" title=\"8.config内置对象是ServletConfig类的一个实例。在Servlet初始化的时候，JSP引擎通过config向它传递信息。这种信息可以是属性名/值匹配的参数，也可以是通过ServletContext对象传递的服务器的有关信息。\"></a>8.config内置对象是ServletConfig类的一个实例。在Servlet初始化的时候，JSP引擎通过config向它传递信息。这种信息可以是属性名/值匹配的参数，也可以是通过ServletContext对象传递的服务器的有关信息。</h3><p>一般在JSP开发过程很少使用到config内置对象。只有在编写Servlet时，需要重载Servlet的init()方式时才用到。</p>\n<h3 id=\"9-pageContext对象是一个比较特殊的对象。它相当于页面中所有其他对象功能的最大集成者，即使用它可以访问到本页面中所有其他对象，例如前面已经描述的request、response以及application对象等。\"><a href=\"#9-pageContext对象是一个比较特殊的对象。它相当于页面中所有其他对象功能的最大集成者，即使用它可以访问到本页面中所有其他对象，例如前面已经描述的request、response以及application对象等。\" class=\"headerlink\" title=\"9.pageContext对象是一个比较特殊的对象。它相当于页面中所有其他对象功能的最大集成者，即使用它可以访问到本页面中所有其他对象，例如前面已经描述的request、response以及application对象等。\"></a>9.pageContext对象是一个比较特殊的对象。它相当于页面中所有其他对象功能的最大集成者，即使用它可以访问到本页面中所有其他对象，例如前面已经描述的request、response以及application对象等。</h3><p>pageContext对象的常用方法<br>这个对象中常使用的方法如下：<br>getRequest()：返回当前页面中的request对象。<br>getResponse()：使用此方法将返回当前页面中的response对象。<br>getPage()：此方法返回当前页面中的page对象。<br>getSession()：返回当前页面中的session对象。<br>getOut()：返回当前页面中的out对象。<br>getException()：返回当前页面中的exception对象。<br>getServletConfig()：返回当前页的config对象。<br>getServletContext()：返回当前页中的application对象。<br>setAttribute(String name)：给指定的属性名设置属性值。<br>getAttribute(String name)：根据属性名称找到相应的属性值。<br>setAttribute(String name, Object obj, int scope)：在给定的范围内设置相应的属性值。<br>getAttribute(String name, int scope)：在指定的范围内获取到相应的属性值。<br>findAttribute(String name)：寻找一个属性并返回，如果没有找到则返回一个null。<br>removeAttribute(String name)：通过属性名删除掉某个属性。<br>removeAttribute(String name, int scope)：在指定的某个范围内删除某个属性。<br>getAttributeScope(String scope)：返回某属性的作用域。<br>getAttributeNamesInScope(int scope)：返回指定范围内的所有属性名的枚举。<br>release()：释放掉pageContext()所占的所有资源。<br>forward(String relativeURLpath)：使用当前页面重导到另一个页面。<br>include(String relativeURLpath)：使用当前位置包含的另一个页面。</p>\n<hr>\n<p>title: JSP的九大内置对象及四大作用域<br>date: 2018-08-24 20:27:49<br>categories:JavaWeb<br>tags: </p>\n<pre><code>- JavaServer Pages(jsp)\n</code></pre><hr>\n","link":"/post/JSP的九大内置对象及四大作用域","toc":[{"title":"一、JSP有九个内置对象（又叫隐含对象），不需要预先声明就可以在脚本代码和表达式中随意使用.","id":"一、JSP有九个内置对象（又叫隐含对象），不需要预先声明就可以在脚本代码和表达式中随意使用","index":"1","children":[{"title":"1、request对象","id":"1、request对象","index":"1.1"},{"title":"2、response对象","id":"2、response对象","index":"1.2"},{"title":"3、session对象","id":"3、session对象","index":"1.3"},{"title":"4、application对象","id":"4、application对象","index":"1.4"},{"title":"5、out 对象","id":"5、out-对象","index":"1.5"},{"title":"6、pageContext 对象","id":"6、pageContext-对象","index":"1.6"},{"title":"7、config 对象","id":"7、config-对象","index":"1.7"},{"title":"8、page 对象","id":"8、page-对象","index":"1.8"},{"title":"9、exception 对象","id":"9、exception-对象","index":"1.9"}]},{"title":"二、所谓“作用域”就是“信息共享的范围”，也就是说一个信息能够在多大的范围内有效。JSP中九个内置对象及其相应所属作用域如下表","id":"二、所谓“作用域”就是“信息共享的范围”，也就是说一个信息能够在多大的范围内有效。JSP中九个内置对象及其相应所属作用域如下表","index":"2","children":[{"title":"1.application","id":"1-application","index":"2.1"},{"title":"2.session","id":"2-session","index":"2.2"},{"title":"3.request","id":"3-request","index":"2.3"},{"title":"4.page","id":"4-page","index":"2.4"},{"title":"5.作用域表","id":"5-作用域表","index":"2.5"}]},{"title":"三、九大内置对象的常用方法","id":"三、九大内置对象的常用方法","index":"3","children":[{"title":"1.request内置对象是最常用的对象之一，它代表的是java.servlet.HttpServletRequest类的对象。request内置对象中包含了有关浏览器请求的信息，并提供了多个用于获取cookie、header以及session内数据的方法。","id":"1-request内置对象是最常用的对象之一，它代表的是java-servlet-HttpServletRequest类的对象。request内置对象中包含了有关浏览器请求的信息，并提供了多个用于获取cookie、header以及session内数据的方法。","index":"3.1"},{"title":"2.response对象与request对象相对应，它是用于响应客户请求，向客户端输出信息。response是javax.servlet.HttpServletResponse类的对象。","id":"2-response对象与request对象相对应，它是用于响应客户请求，向客户端输出信息。response是javax-servlet-HttpServletResponse类的对象。","index":"3.2"},{"title":"3.page对象有点类似于Java编程中的this指针，就是指当前JSP页面本身。page是java.lang.Object类的对象。","id":"3-page对象有点类似于Java编程中的this指针，就是指当前JSP页面本身。page是java-lang-Object类的对象。","index":"3.3"},{"title":"4.session是与请求有关的会话期，它是java.servlet.http.HttpSession类的对象，用来表示和存储当前页面的请求信息。","id":"4-session是与请求有关的会话期，它是java-servlet-http-HttpSession类的对象，用来表示和存储当前页面的请求信息。","index":"3.4"},{"title":"5.application是javax.servlet.ServletContext类对象的一个实例，用于实现用户之间的数据共享（多使用于网络聊天系统）。","id":"5-application是javax-servlet-ServletContext类对象的一个实例，用于实现用户之间的数据共享（多使用于网络聊天系统）。","index":"3.5"},{"title":"6.out对象是在JSP开发过程中使用得最为频繁的对象，但使用也是最为简单的。","id":"6-out对象是在JSP开发过程中使用得最为频繁的对象，但使用也是最为简单的。","index":"3.6"},{"title":"7.exception内置对象是用来处理页面出现的异常错误，它是java.lang.Throwable类的一个对象。在实际JSP网站开发过程中，通常是在其页面中加入page指令的errorPage属性来将其指向一个专门处理异常错误的页面。如果这个错误处理页面已经封装了这个页面收到的错误信息，并且错误处理页面页面含有的isErrorpage属性设置为true，则这个错误处理页面可以使用以下方法来访问错误的信息：","id":"7-exception内置对象是用来处理页面出现的异常错误，它是java-lang-Throwable类的一个对象。在实际JSP网站开发过程中，通常是在其页面中加入page指令的errorPage属性来将其指向一个专门处理异常错误的页面。如果这个错误处理页面已经封装了这个页面收到的错误信息，并且错误处理页面页面含有的isErrorpage属性设置为true，则这个错误处理页面可以使用以下方法来访问错误的信息：","index":"3.7"},{"title":"8.config内置对象是ServletConfig类的一个实例。在Servlet初始化的时候，JSP引擎通过config向它传递信息。这种信息可以是属性名/值匹配的参数，也可以是通过ServletContext对象传递的服务器的有关信息。","id":"8-config内置对象是ServletConfig类的一个实例。在Servlet初始化的时候，JSP引擎通过config向它传递信息。这种信息可以是属性名-值匹配的参数，也可以是通过ServletContext对象传递的服务器的有关信息。","index":"3.8"},{"title":"9.pageContext对象是一个比较特殊的对象。它相当于页面中所有其他对象功能的最大集成者，即使用它可以访问到本页面中所有其他对象，例如前面已经描述的request、response以及application对象等。","id":"9-pageContext对象是一个比较特殊的对象。它相当于页面中所有其他对象功能的最大集成者，即使用它可以访问到本页面中所有其他对象，例如前面已经描述的request、response以及application对象等。","index":"3.9"}]}]}